// main.cpp - Main application entry point

#include "config.h"
#include "websocket_client.h"
#include "kafka_producer.h"
#include "ohlcv_processor.h"
#include "logging.h"
#include "metrics.h"

#include <iostream>
#include <thread>
#include <csignal>
#include <atomic>
#include <vector>
#include <fstream>
#include <queue>
#include <chrono>
#include <argparse/argparse.hpp>

// Global signal handler for graceful shutdown
std::atomic<bool> g_keepRunning(true);

void signalHandler(int signum) {
    LOG_INFO("Received signal {}", signum);
    g_keepRunning = false;
}

int main(int argc, char* argv[]) {
    // Parse command line arguments
    argparse::ArgumentParser program("binance_data_collector");
    
    program.add_argument("-c", "--config")
        .default_value(std::string("config.json"))
        .help("Path to configuration file");
    
    program.add_argument("-v", "--verbose")
        .default_value(false)
        .implicit_value(true)
        .help("Enable verbose logging");
        
    try {
        program.parse_args(argc, argv);
    } catch (const std::runtime_error& err) {
        std::cerr << err.what() << std::endl;
        std::cerr << program;
        return 1;
    }
    
    // Initialize logging
    std::string logLevel = program.get<bool>("verbose") ? "debug" : "info";
    initLogging(logLevel);
    
    LOG_INFO("Starting Binance Data Collector");
    
    // Load configuration
    try {
        Config config(program.get<std::string>("config"));
        LOG_INFO("Loaded configuration from {}", program.get<std::string>("config"));
        LOG_DEBUG("Configuration: {}", config.toString());
        
        // Register signal handlers
        std::signal(SIGINT, signalHandler);
        std::signal(SIGTERM, signalHandler);
        
        // Initialize metrics collector
        Metrics metrics;
        metrics.startReporting(config.metricsIntervalSec);
        
        // Initialize components
        std::vector<std::unique_ptr<WebSocketClient>> wsClients;
        std::vector<std::unique_ptr<OHLCVProcessor>> processors;
        std::unique_ptr<KafkaProducer> kafkaProducer = std::make_unique<KafkaProducer>(
            config.kafkaBroker, 
            config.kafkaTopic,
            config.kafkaConfig
        );
        
        // Setup processing pipeline for each symbol
        for (const auto& symbolConfig : config.symbols) {
            LOG_INFO("Setting up processing for symbol: {}", symbolConfig.symbol);
            
            // Create WebSocket client for this symbol
            auto wsClient = std::make_unique<WebSocketClient>(
                symbolConfig.wsUrl,
                symbolConfig.symbol,
                config.reconnectIntervalMs,
                config.maxReconnectAttempts
            );
            
            // Create processor for this symbol and timeframes
            auto processor = std::make_unique<OHLCVProcessor>(
                symbolConfig.symbol,
                symbolConfig.timeframes,
                *kafkaProducer,
                metrics
            );
            
            // Connect WebSocket client to processor
            wsClient->setTickDataCallback([&processor](const TradeData& trade) {
                processor->addTickData(trade);
            });
            
            // Start WebSocket client
            wsClient->connect();
            
            // Store components
            wsClients.push_back(std::move(wsClient));
            processors.push_back(std::move(processor));
        }
        
        // Start heartbeat thread
        std::thread heartbeatThread([&]() {
            while (g_keepRunning) {
                LOG_DEBUG("Heartbeat: System running");
                metrics.recordHeartbeat();
                std::this_thread::sleep_for(std::chrono::seconds(30));
            }
        });
        
        // Main processing loop
        while (g_keepRunning) {
            // Check WebSocket connections
            for (auto& wsClient : wsClients) {
                if (!wsClient->isConnected() && wsClient->shouldReconnect()) {
                    LOG_WARNING("WebSocket for {} disconnected, attempting to reconnect", 
                                wsClient->getSymbol());
                    wsClient->connect();
                }
            }
            
            // Process OHLCV data
            for (auto& processor : processors) {
                processor->processData();
            }
            
            // Sleep to avoid busy waiting
            std::this_thread::sleep_for(std::chrono::milliseconds(100));
        }
        
        // Graceful shutdown
        LOG_INFO("Shutting down...");
        
        // Stop WebSocket clients
        for (auto& wsClient : wsClients) {
            wsClient->disconnect();
        }
        
        // Final processing of any remaining data
        for (auto& processor : processors) {
            processor->processData();
            processor->flushAll();
        }
        
        // Clean up heartbeat thread
        if (heartbeatThread.joinable()) {
            heartbeatThread.join();
        }
        
        LOG_INFO("Shutdown complete");
        return 0;
        
    } catch (const std::exception& e) {
        LOG_CRITICAL("Fatal error: {}", e.what());
        return 1;
    }
}
